{"version":3,"sources":["utils/useStats.js","components/StatsCards.js","components/StatsDisplay.js","components/CountrySelector.js","utils/reverseGeoCoding.js","components/GeoLocationStats.js","utils/getGeoLocation.js","components/EarthChart.js","components/EarthStats.js","components/App.js","index.js"],"names":["useStats","url","useState","stats","setStats","useEffect","a","fetch","then","res","json","reason","console","log","data","fetchData","StatsCards","props","confirmedNum","deathsNum","recoveredNum","fatalityRate","toFixed","renderCard","title","number","bgColor","Card","style","backgroundColor","color","Body","toLocaleString","Container","className","Row","Col","lg","StatsDisplay","confirmed","value","deaths","recovered","URL_COUNTRIES","CountrySelector","selectedCountryCode","setSelectedCountryCode","countries","url_selectedCountry","Form","Control","as","maxWidth","onChange","e","target","Object","entries","map","code","key","iso3","name","renderCountryList","KEY","GeoLocationStats","location","setLocation","regionStat","setRegionStat","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","error","alert","countryName","countryCode","region","results","address_components","forEach","element","types","includes","long_name","short_name","Error","reverseGeoCoding","locationInfo","catch","stat","find","obj","provinceState","options","hAxis","vAxis","EarthStats","earthDailyStats","setEarthDailyStats","statsArray","push","reportDate","deltaConfirmed","chartType","loader","width","height","rootProps","App","fluid","ReactDOM","render","document","querySelector"],"mappings":"oPAEe,SAASA,EAASC,GAAM,IAAD,EACVC,qBADU,mBAC7BC,EAD6B,KACtBC,EADsB,KAoBpC,OAjBAC,qBAAU,WAAM,4CAId,4BAAAC,EAAA,sEACqBC,MAAMN,GAAKO,MAC5B,SAACC,GAAD,OAASA,EAAIC,UACb,SAACC,GAAD,OAAYC,QAAQC,IAAIF,MAH5B,OACQG,EADR,OAMEV,EAASU,GANX,4CAJc,sBACTb,GADS,mCAadc,KACC,CAACd,IAEJW,QAAQC,IAAIV,GACLA,E,oBCnBM,SAASa,EAAWC,GACjC,IAAMC,EAAeD,EAAMC,aACrBC,EAAYF,EAAME,UAClBC,EAAeH,EAAMG,aACrBC,GAAiBF,EAAYD,EAAgB,KAAKI,QAAQ,GAAK,IAErE,SAASC,EAAWC,EAAOC,EAAQC,GACjC,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,gBAAiBH,EAASI,MAAO,UAC9C,kBAACH,EAAA,EAAKI,KAAN,KACE,4BAAKP,GACL,4BAAKC,EAAOO,oBAMpB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,SACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,IAAE,GAAEd,EAAW,YAAaL,EAAc,YAC/C,kBAACkB,EAAA,EAAD,CAAKC,IAAE,GAAEd,EAAW,SAAUJ,EAAW,YACzC,kBAACiB,EAAA,EAAD,CAAKC,IAAE,GAAEd,EAAW,YAAaH,EAAc,YAC/C,kBAACgB,EAAA,EAAD,CAAKC,IAAE,GAAEd,EAAW,gBAAiBF,EAAc,cCpB5C,SAASiB,EAAT,GAAgC,IACvCxB,EAAOd,EAD+B,EAAPC,KAgErC,OACE,kBAACe,EAAD,CACEE,aACEJ,EAAOA,EAAKyB,WAAazB,EAAKyB,UAAUC,MAApC,aAENrB,UAAWL,EAAOA,EAAKyB,WAAazB,EAAK2B,OAAOD,MAAjC,aACfpB,aACEN,EAAOA,EAAKyB,WAAazB,EAAK4B,UAAUF,MAApC,e,YCvENG,EAAgB,2CAEP,SAASC,IAAmB,IAAD,EACc1C,mBAAS,OADvB,mBACjC2C,EADiC,KACZC,EADY,KAGlCC,EAAY/C,EAAS2C,GAiB3B,IAAMK,EAAsBL,EAAa,WAAOE,GAEhD,OACE,yBAAKX,UAAU,OACb,kBAACe,EAAA,EAAD,KACE,8DAAoCJ,GACpC,kBAACI,EAAA,EAAKC,QAAN,CACEC,GAAG,SACHvB,MAAO,CAAEwB,SAAU,SACnBC,SAAU,SAACC,GACTR,EAAuBQ,EAAEC,OAAOf,SA1B1C,SAA2BO,GACzB,OAAKA,EAGYS,OAAOC,QAAQV,EAAUA,WAAWW,KACjD,YAAoB,IAAD,mBAAjBC,EAAiB,KAAXnB,EAAW,KACjB,OACE,4BAAQoB,IAAKD,EAAMnB,MAAOA,EAAMqB,MAC7BrB,EAAMsB,SANT,aA2BDC,CAAkBhB,KAGvB,kBAACT,EAAD,CAAcrC,IAAK+C,KC5CzB,IAAMgB,EAAG,0CCOT,IAqEeC,EAlEU,WAAO,IAAD,EACG/D,qBADH,mBACtBgE,EADsB,KACZC,EADY,OAEOjE,qBAFP,mBAEtBkE,EAFsB,KAEVC,EAFU,KA8B7B,OA3BAhE,qBAAU,WCZH,IAAIiE,SAAQ,SAACC,EAASC,GAQvBC,UAAUC,YACZD,UAAUC,YAAYC,oBARxB,SAAuBC,GACrBL,EAAQ,CACNM,IAAKD,EAASE,OAAOC,SACrBC,KAAMJ,EAASE,OAAOG,eAKgC,SAACC,GAAD,OACtDV,EAAO,UAAD,OAAWU,OAGnBC,MAAM,mDDCL3E,MAAK,SAACC,GAAD,ODbG,WAA+C,IAAD,yDAAJ,GAAdoE,EAAkB,EAAlBA,IAAKG,EAAa,EAAbA,KAC9C,OAAO,IAAIV,SAAQ,SAACC,EAASC,GAC3B,GAAKK,GAAQG,EAAb,CAGA,IAAM/E,EAAG,mEAA+D4E,EAA/D,aAAuEG,EAAvE,gBAAmFhB,GAE5FzD,MAAMN,GACHO,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACM,GACL,IAAIsE,EAAaC,EAAaC,EACdxE,EAAKyE,QAAQ,GAAGC,mBACxBC,SAAQ,SAACC,GACXA,EAAQC,MAAMC,SAAS,aACzBR,EAAcM,EAAQG,UACtBR,EAAcK,EAAQI,YAEpBJ,EAAQC,MAAMC,SAAS,iCACzBN,EAASI,EAAQG,cAGjBT,GAAeC,GAAeC,EAChCf,EAAQ,CAAEa,cAAaC,cAAaC,WAEpCd,EAAO,IAAIuB,MAAJ,oDCXIC,CAAiBvF,MAC/BD,MAAK,SAACyF,GACLrF,QAAQC,IAAIoF,GACZ9B,EAAY8B,MAKbC,OAAM,SAAChB,GAAD,OAAWtE,QAAQC,IAAIqE,QAC/B,IAEH7E,qBAAU,WACRE,MAAM,4CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACM,GACL,GAAIoD,EAAU,CACZ,IAAMiC,EAAOrF,EAAKsF,MAChB,SAACC,GAAD,OAASA,EAAIC,gBAAkBpC,EAASoB,UAE1C1E,QAAQC,IAAIsF,GACZ9B,EAAc8B,SAGnB,CAACjC,IAGF,yBAAKhC,UAAU,OACb,6BACE,wBAAIA,UAAU,QAAd,oBACoB,IAClB,8BACGgC,EAAWA,GAAQ,UAAOA,EAASkB,YAAhB,MAAX,cAEX,8BAAOlB,EAAWA,GAAYA,EAASoB,OAAxB,gBAGnB,6BACE,4BAAKpB,EAAWA,GAAQ,UAAOA,EAASkB,aAA3B,IACZlB,GAAY,kBAAC5B,EAAD,CAAcrC,IA9ClB,4CA8CqCiE,EAASmB,eAEzD,6BACE,4BAAKnB,EAAWA,GAAYA,EAASoB,OAAxB,IACb,kBAACtE,EAAD,CACEE,aAAckD,EAAaA,EAAW7B,UAAd,aACxBpB,UAAWiD,EAAaA,EAAW3B,OAAd,aACrBrB,aAAcgD,EAAaA,EAAW1B,UAAd,kB,QEvD5B6D,EAAU,CACd/E,MAAO,qBACPgF,MAAO,CAAEhF,MAAO,QAChBiF,MAAO,CAAEjF,MAAO,UAChBK,gBAAiB,WAeJ,SAAS6E,IAAc,IAAD,EACWxG,qBADX,mBAC5ByG,EAD4B,KACXC,EADW,KA8BnC,OA3BAvG,qBAAU,WACR,IAAMwG,EAAa,CACjB,CACE,OAIA,cAGJtG,MAlCkB,wCAmCfC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACM,GAELA,EAAK4C,KAAI,SAAC2C,GACRQ,EAAWC,KAAK,CACdT,EAAIU,WAGJV,EAAIW,oBAIRJ,EAAmBC,QAEtB,IAGD,6BACE,kBAAC,IAAD,CACEI,UAAU,YACVC,OAAQ,8CACRpG,KAAM6F,EACNJ,QAASA,EACTY,MAAM,OACNC,OAAO,QACPC,UAAW,CAAE,cAAe,QCvDrB,SAASX,IACtB,OACE,yBAAKxE,UAAU,OACb,8CACA,kBAACI,EAAD,CAAcrC,IANH,mCAOX,kBAAC,EAAD,O,gBCiBSqH,EAnBH,WACV,OACE,kBAACrF,EAAA,EAAD,CAAWsF,OAAK,EAACrF,UAAU,OACzB,8CAEA,kBAACP,EAAA,EAAD,CAAMO,UAAU,SACd,kBAAC,EAAD,OAGF,kBAACP,EAAA,EAAD,CAAMO,UAAU,SACd,kBAAC,EAAD,OAEF,kBAACP,EAAA,EAAD,CAAMO,UAAU,SACd,kBAACU,EAAD,SCpBR4E,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.625bf9a5.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useStats(url) {\n  const [stats, setStats] = useState();\n\n  useEffect(() => {\n    if (!url) {\n      return;\n    }\n    async function fetchData() {\n      const data = await fetch(url).then(\n        (res) => res.json(),\n        (reason) => console.log(reason)\n      );\n\n      setStats(data);\n    }\n\n    fetchData();\n  }, [url]);\n\n  console.log(stats);\n  return stats;\n}\n","import React from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\n\nexport default function StatsCards(props) {\n  const confirmedNum = props.confirmedNum;\n  const deathsNum = props.deathsNum;\n  const recoveredNum = props.recoveredNum;\n  const fatalityRate = ((deathsNum / confirmedNum) * 100).toFixed(2) + \"%\";\n\n  function renderCard(title, number, bgColor) {\n    return (\n      <Card style={{ backgroundColor: bgColor, color: \"white\" }}>\n        <Card.Body>\n          <h5>{title}</h5>\n          <h1>{number.toLocaleString()}</h1>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  return (\n    <Container className=\"cards\">\n      <Row>\n        <Col lg>{renderCard(\"Confirmed\", confirmedNum, \"#355cfa\")}</Col>\n        <Col lg>{renderCard(\"Deaths\", deathsNum, \"#ee3045\")}</Col>\n        <Col lg>{renderCard(\"Recovered\", recoveredNum, \"#119a84\")}</Col>\n        <Col lg>{renderCard(\"Fatality Rate\", fatalityRate, \"#fe6f4c\")}</Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\n\nimport useStats from \"../utils/useStats\";\nimport StatsCards from \"./StatsCards\";\n\nexport default function StatsDisplay({ url }) {\n  const data = useStats(url);\n\n  // function renderCard(title, number, bgColor) {\n  //   return (\n  //     <Card style={{ backgroundColor: bgColor, color: \"white\" }}>\n  //       <Card.Body>\n  //         <h5>{title}</h5>\n  //         <h1>{number.toLocaleString()}</h1>\n  //       </Card.Body>\n  //     </Card>\n  //   );\n  // }\n\n  // return (\n  //   <div>\n  //     <Container className=\"cards\">\n  //       <Row>\n  //         <Col lg>\n  //           {renderCard(\n  //             \"Confirmed\",\n  //             data ? data.confirmed && data.confirmed.value : `loading...`,\n  //             \"#355cfa\"\n  //           )}\n  //         </Col>\n  //         <Col lg>\n  //           {renderCard(\n  //             \"Deaths\",\n  //             data ? data.confirmed && data.deaths.value : `loading...`,\n  //             \"#ee3045\"\n  //           )}\n  //         </Col>\n  //         <Col lg>\n  //           {renderCard(\n  //             \"Recovered\",\n  //             data ? data.confirmed && data.recovered.value : `loading...`,\n  //             \"#119a84\"\n  //           )}\n  //         </Col>\n  //         <Col lg>\n  //           {renderCard(\n  //             \"Fatality Rate\",\n  //             data\n  //               ? ((data.deaths.value / data.confirmed.value) * 100).toFixed(\n  //                   2\n  //                 ) + \"%\"\n  //               : `loading...`,\n  //             \"#fe6f4c\"\n  //           )}\n  //         </Col>\n  //       </Row>\n  //     </Container>\n  //     <StatsCards\n  //       confirmedNum={\n  //         data ? data.confirmed && data.confirmed.value : `loading...`\n  //       }\n  //       deathsNum={data ? data.confirmed && data.deaths.value : `loading...`}\n  //       recoveredNum={\n  //         data ? data.confirmed && data.recovered.value : `loading...`\n  //       }\n  //     />\n  //   </div>\n  // );\n\n  return (\n    <StatsCards\n      confirmedNum={\n        data ? data.confirmed && data.confirmed.value : `loading...`\n      }\n      deathsNum={data ? data.confirmed && data.deaths.value : `loading...`}\n      recoveredNum={\n        data ? data.confirmed && data.recovered.value : `loading...`\n      }\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\n\nimport StatsDisplay from \"./StatsDisplay\";\nimport useStats from \"../utils/useStats\";\n\nconst URL_COUNTRIES = \"https://covid19.mathdro.id/api/countries\";\n\nexport default function CountrySelector() {\n  const [selectedCountryCode, setSelectedCountryCode] = useState(\"AFG\");\n\n  const countries = useStats(URL_COUNTRIES);\n  function renderCountryList(countries) {\n    if (!countries) {\n      return `loading...`;\n    } else {\n      const result = Object.entries(countries.countries).map(\n        ([code, value]) => {\n          return (\n            <option key={code} value={value.iso3}>\n              {value.name}\n            </option>\n          );\n        }\n      );\n      return result;\n    }\n  }\n  const url_selectedCountry = URL_COUNTRIES + `/${selectedCountryCode}`;\n\n  return (\n    <div className=\"m-5\">\n      <Form>\n        <h3>Select a country to see stats: {selectedCountryCode}</h3>\n        <Form.Control\n          as=\"select\"\n          style={{ maxWidth: \"400px\" }}\n          onChange={(e) => {\n            setSelectedCountryCode(e.target.value);\n          }}\n        >\n          {renderCountryList(countries)}\n        </Form.Control>\n      </Form>\n      <StatsDisplay url={url_selectedCountry} />\n    </div>\n  );\n}\n","const KEY = `AIzaSyBejPpobPd1CP5i6XFXwZUQhkKoVsXdeGc`;\n\nexport default function reverseGeoCoding({ lat, long } = {}) {\n  return new Promise((resolve, reject) => {\n    if (!lat || !long) {\n      return;\n    }\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat}, ${long}&key=${KEY}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        let countryName, countryCode, region;\n        const locInfo = data.results[0].address_components;\n        locInfo.forEach((element) => {\n          if (element.types.includes(\"country\")) {\n            countryName = element.long_name;\n            countryCode = element.short_name;\n          }\n          if (element.types.includes(\"administrative_area_level_1\")) {\n            region = element.long_name;\n          }\n        });\n        if (countryName && countryCode && region) {\n          resolve({ countryName, countryCode, region });\n        } else {\n          reject(new Error(`something went wrong in reverseGeoCoding`));\n        }\n      });\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport StatsDisplay from \"./StatsDisplay\";\nimport getGeoLocation from \"../utils/getGeoLocation\";\n// import useReverseGeoCoding from \"../utils/useReverseGeoCoding\";\nimport reverseGeoCoding from \"../utils/reverseGeoCoding\";\nimport StatsCards from \"./StatsCards\";\n\nconst URL_COUNTRY = `https://covid19.mathdro.id/api/countries/`;\nconst URL_GLOBAL = `https://covid19.mathdro.id/api/confirmed`;\n\nconst GeoLocationStats = () => {\n  const [location, setLocation] = useState();\n  const [regionStat, setRegionStat] = useState();\n  useEffect(() => {\n    getGeoLocation()\n      .then((res) => reverseGeoCoding(res))\n      .then((locationInfo) => {\n        console.log(locationInfo);\n        setLocation(locationInfo);\n      })\n      // .then((res) => {\n      //   return fetch(`https://covid19.mathdro.id/api/confirmed`);\n      // })\n      .catch((error) => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    fetch(`https://covid19.mathdro.id/api/confirmed`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (location) {\n          const stat = data.find(\n            (obj) => obj.provinceState === location.region\n          );\n          console.log(stat);\n          setRegionStat(stat);\n        }\n      });\n  }, [location]);\n\n  return (\n    <div className=\"m-5\">\n      <div>\n        <h3 className=\"mb-2\">\n          Current location:{\" \"}\n          <span>\n            {location ? location && `${location.countryName}, ` : `loading...`}\n          </span>\n          <span>{location ? location && location.region : `loading...`}</span>\n        </h3>\n      </div>\n      <div>\n        <h5>{location ? location && `${location.countryName}` : ``}</h5>\n        {location && <StatsDisplay url={URL_COUNTRY + location.countryCode} />}\n      </div>\n      <div>\n        <h5>{location ? location && location.region : ``}</h5>\n        <StatsCards\n          confirmedNum={regionStat ? regionStat.confirmed : `loading...`}\n          deathsNum={regionStat ? regionStat.deaths : `loading...`}\n          recoveredNum={regionStat ? regionStat.recovered : `loading...`}\n        />\n        {/* <div>Confirmed: {regionStat ? regionStat.confirmed : `loading...`}</div>\n        <div>Recovered: {regionStat ? regionStat.recovered : `loading...`}</div>\n        <div>Deaths: {regionStat ? regionStat.deaths : `loading...`}</div>\n        <div>\n          Fatality Rate:{\" \"}\n          {regionStat\n            ? `${(regionStat.deaths / regionStat.confirmed).toFixed(3) * 100}%`\n            : `loading...`}\n        </div> */}\n      </div>\n    </div>\n  );\n};\n\nexport default GeoLocationStats;\n","export default function getGeoLocation() {\n  return new Promise((resolve, reject) => {\n    function handleSuccess(position) {\n      resolve({\n        lat: position.coords.latitude,\n        long: position.coords.longitude,\n      });\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleSuccess, (error) =>\n        reject(`error: ${error}`)\n      );\n    } else {\n      alert(\"Geolocation is not supported by your browser\");\n    }\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nconst urlEarthDaily = \"https://covid19.mathdro.id/api/daily\";\n\nconst options = {\n  title: \"New Cases on Earth\",\n  hAxis: { title: \"Date\" },\n  vAxis: { title: \"Number\" },\n  backgroundColor: \"#f7f7f7\",\n  // legend: \"none\",\n};\nconst data = [\n  [\"Age\", \"Weight\"],\n  [8, 12],\n  [4, 5.5],\n  [11, 14],\n  [4, 5],\n  [3, 3.5],\n  [6.5, 7],\n];\n\n// const earthDailyStats = [[\"Date\", \"Confirmed\", \"Deaths\", \"New cases\"]];\n\nexport default function EarthStats() {\n  const [earthDailyStats, setEarthDailyStats] = useState();\n\n  useEffect(() => {\n    const statsArray = [\n      [\n        \"Date\",\n        // { type: \"date\", label: \"Day\" },\n        // \"Confirmed\",\n        // \"Deaths\",\n        \"New cases\",\n      ],\n    ];\n    fetch(urlEarthDaily)\n      .then((res) => res.json())\n      .then((data) => {\n        // console.log(data);\n        data.map((obj) => {\n          statsArray.push([\n            obj.reportDate,\n            // obj.confirmed.total,\n            // obj.deaths.total,\n            obj.deltaConfirmed,\n          ]);\n        });\n        // console.log(statsArray);\n        setEarthDailyStats(statsArray);\n      });\n  }, []);\n\n  return (\n    <div>\n      <Chart\n        chartType=\"AreaChart\"\n        loader={<div>Loading Chart</div>}\n        data={earthDailyStats}\n        options={options}\n        width=\"100%\"\n        height=\"400px\"\n        rootProps={{ \"data-testid\": \"3\" }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport EarthChart from \"./EarthChart\";\nimport StatsDisplay from \"./StatsDisplay\";\nimport useStats from \"../utils/useStats\";\n\nconst urlEarth = \"https://covid19.mathdro.id/api\";\n\nexport default function EarthStats() {\n  return (\n    <div className=\"m-5\">\n      <h3>Total on Earth</h3>\n      <StatsDisplay url={urlEarth} />\n      <EarthChart />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Container, Card } from \"react-bootstrap\";\n\nimport StatsDisplay from \"./StatsDisplay\";\n// import LocalStats from \"./LocalStats\";\nimport CountrySelector from \"./CountrySelector\";\nimport GeoLocationStats from \"./GeoLocationStats\";\nimport EarthStats from \"./EarthStats\";\nimport \"../css/App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst App = () => {\n  return (\n    <Container fluid className=\"app\">\n      <h2>Covid-19 Stats</h2>\n\n      <Card className=\"panel\">\n        <EarthStats />\n      </Card>\n      {/* <LocalStats /> */}\n      <Card className=\"panel\">\n        <GeoLocationStats />\n      </Card>\n      <Card className=\"panel\">\n        <CountrySelector />\n      </Card>\n    </Container>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}