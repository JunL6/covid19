{"version":3,"sources":["utils/useStats.js","components/StatsDisplay.js","components/CountrySelector.js","utils/reverseGeoCoding.js","components/GeoLocationStats.js","utils/getGeoLocation.js","components/EarthStats.js","components/App.js","index.js"],"names":["useStats","url","useState","stats","setStats","useEffect","a","fetch","then","res","json","reason","console","log","data","fetchData","StatsDisplay","className","confirmed","value","deaths","recovered","toFixed","CountrySelector","selectedCountryCode","setSelectedCountryCode","countries","url_selectedCountry","onChange","e","target","Object","entries","map","code","key","iso3","name","renderCountryList","KEY","GeoLocationStats","location","setLocation","regionStat","setRegionStat","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","error","alert","countryName","countryCode","region","results","address_components","forEach","element","types","includes","long_name","short_name","Error","reverseGeoCoding","locationInfo","catch","stat","find","obj","provinceState","options","title","hAxis","vAxis","EarthStats","earthDailyStats","setEarthDailyStats","statsArray","push","reportDate","total","deltaConfirmed","chartType","loader","width","height","rootProps","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.15aa7d7a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useStats(url) {\n  const [stats, setStats] = useState();\n\n  useEffect(() => {\n    if (!url) {\n      return;\n    }\n    async function fetchData() {\n      const data = await fetch(url).then(\n        (res) => res.json(),\n        (reason) => console.log(reason)\n      );\n\n      setStats(data);\n    }\n\n    fetchData();\n  }, [url]);\n\n  return stats;\n}\n","import React, { useState } from \"react\";\nimport useStats from \"../utils/useStats\";\nimport \"../css/StatsDisplay.css\";\n\nfunction StatsDisplay({ url }) {\n  const data = useStats(url);\n\n  return (\n    <div className=\"stats-display\">\n      <div>\n        Confirmed:{\" \"}\n        {data ? data.confirmed && data.confirmed.value : `loading...`}\n      </div>\n      <div>\n        Deaths: {data ? data.confirmed && data.deaths.value : `loading...`}\n      </div>\n      <div>\n        Recovered:{\" \"}\n        {data ? data.confirmed && data.recovered.value : `loading...`}\n      </div>\n      <div>\n        Fatality Rate:\n        {data\n          ? `${\n              data.confirmed &&\n              (data.deaths.value / data.confirmed.value).toFixed(3) * 100\n            }%`\n          : `loading...`}\n      </div>\n    </div>\n  );\n}\n\nexport default StatsDisplay;\n","import React, { useState } from \"react\";\nimport StatsDisplay from \"./StatsDisplay\";\nimport useStats from \"../utils/useStats\";\n\nexport default function CountrySelector() {\n  const [selectedCountryCode, setSelectedCountryCode] = useState(\"\");\n\n  const countries = useStats(`https://covid19.mathdro.id/api/countries`);\n  function renderCountryList(countries) {\n    if (!countries) {\n      return `loading...`;\n    } else {\n      const result = Object.entries(countries.countries).map(\n        ([code, value]) => {\n          return (\n            <option key={code} value={value.iso3}>\n              {value.name}\n            </option>\n          );\n        }\n      );\n      return result;\n    }\n  }\n  const url_selectedCountry = `https://covid19.mathdro.id/api/countries/${selectedCountryCode}`;\n\n  return (\n    <div className=\"panel panel-countryselector\">\n      <h3>Select a country to see stats</h3>\n      <div>\n        <select\n          onChange={(e) => {\n            setSelectedCountryCode(e.target.value);\n          }}\n        >\n          {renderCountryList(countries)}\n        </select>\n        <span>selected country: {selectedCountryCode}</span>\n      </div>\n      <StatsDisplay url={url_selectedCountry} />\n    </div>\n  );\n}\n","const KEY = `AIzaSyBejPpobPd1CP5i6XFXwZUQhkKoVsXdeGc`;\n\nexport default function reverseGeoCoding({ lat, long } = {}) {\n  return new Promise((resolve, reject) => {\n    if (!lat || !long) {\n      return;\n    }\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat}, ${long}&key=${KEY}`;\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        let countryName, countryCode, region;\n        const locInfo = data.results[0].address_components;\n        locInfo.forEach((element) => {\n          if (element.types.includes(\"country\")) {\n            countryName = element.long_name;\n            countryCode = element.short_name;\n          }\n          if (element.types.includes(\"administrative_area_level_1\")) {\n            region = element.long_name;\n          }\n        });\n        if (countryName && countryCode && region) {\n          resolve({ countryName, countryCode, region });\n        } else {\n          reject(new Error(`something went wrong in reverseGeoCoding`));\n        }\n      });\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport StatsDisplay from \"./StatsDisplay\";\nimport getGeoLocation from \"../utils/getGeoLocation\";\n// import useReverseGeoCoding from \"../utils/useReverseGeoCoding\";\nimport reverseGeoCoding from \"../utils/reverseGeoCoding\";\nimport useStats from \"../utils/useStats\";\n\nconst URL_COUNTRY = `https://covid19.mathdro.id/api/countries/`;\nconst URL_GLOBAL = `https://covid19.mathdro.id/api/confirmed`;\n\nconst GeoLocationStats = () => {\n  const [location, setLocation] = useState();\n  const [regionStat, setRegionStat] = useState();\n  useEffect(() => {\n    getGeoLocation()\n      .then((res) => reverseGeoCoding(res))\n      .then((locationInfo) => {\n        console.log(locationInfo);\n        setLocation(locationInfo);\n      })\n      // .then((res) => {\n      //   return fetch(`https://covid19.mathdro.id/api/confirmed`);\n      // })\n      .catch((error) => console.log(error));\n  }, []);\n\n  useEffect(() => {\n    fetch(`https://covid19.mathdro.id/api/confirmed`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (location) {\n          const stat = data.find(\n            (obj) => obj.provinceState === location.region\n          );\n          console.log(stat);\n          setRegionStat(stat);\n        }\n      });\n  }, [location]);\n\n  return (\n    <div className=\"panel panel-local\">\n      <div>\n        <h3>Current location:</h3>\n        <span>\n          {location ? location && `${location.countryName}, ` : `loading...`}\n        </span>\n        <span>{location ? location && location.region : `loading...`}</span>\n      </div>\n      <div>\n        National stats\n        {location && <StatsDisplay url={URL_COUNTRY + location.countryCode} />}\n      </div>\n      <div>\n        Region stats\n        <div>Confirmed: {regionStat ? regionStat.confirmed : `loading...`}</div>\n        <div>Recovered: {regionStat ? regionStat.recovered : `loading...`}</div>\n        <div>Deaths: {regionStat ? regionStat.deaths : `loading...`}</div>\n        <div>\n          Fatality Rate:{\" \"}\n          {regionStat\n            ? `${(regionStat.deaths / regionStat.confirmed).toFixed(3) * 100}%`\n            : `loading...`}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeoLocationStats;\n","export default function getGeoLocation() {\n  return new Promise((resolve, reject) => {\n    function handleSuccess(position) {\n      resolve({\n        lat: position.coords.latitude,\n        long: position.coords.longitude,\n      });\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(handleSuccess, (error) =>\n        reject(`error: ${error}`)\n      );\n    } else {\n      alert(\"Geolocation is not supported by your browser\");\n    }\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Chart } from \"react-google-charts\";\n\nconst urlEarthDaily = \"https://covid19.mathdro.id/api/daily\";\n\nconst options = {\n  title: \"Total stats on earth\",\n  hAxis: { title: \"Date\" },\n  vAxis: { title: \"Number\" },\n  // legend: \"none\",\n};\nconst data = [\n  [\"Age\", \"Weight\"],\n  [8, 12],\n  [4, 5.5],\n  [11, 14],\n  [4, 5],\n  [3, 3.5],\n  [6.5, 7],\n];\n\n// const earthDailyStats = [[\"Date\", \"Confirmed\", \"Deaths\", \"New cases\"]];\n\nexport default function EarthStats() {\n  const [earthDailyStats, setEarthDailyStats] = useState();\n\n  useEffect(() => {\n    const statsArray = [\n      [\n        \"Date\",\n        // { type: \"date\", label: \"Day\" },\n        \"Confirmed\",\n        \"Deaths\",\n        \"New cases\",\n      ],\n    ];\n    fetch(urlEarthDaily)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        data.map((obj) => {\n          statsArray.push([\n            obj.reportDate,\n            obj.confirmed.total,\n            obj.deaths.total,\n            obj.deltaConfirmed,\n          ]);\n        });\n        // console.log(statsArray);\n        setEarthDailyStats(statsArray);\n      });\n  }, []);\n\n  return (\n    <div>\n      <Chart\n        chartType=\"AreaChart\"\n        loader={<div>Loading Chart</div>}\n        data={earthDailyStats}\n        options={options}\n        width=\"100%\"\n        height=\"400px\"\n        rootProps={{ \"data-testid\": \"3\" }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport StatsDisplay from \"./StatsDisplay\";\nimport LocalStats from \"./LocalStats\";\nimport CountrySelector from \"./CountrySelector\";\nimport GeoLocationStats from \"./GeoLocationStats\";\nimport EarthStats from \"./EarthStats\";\nimport \"../css/App.css\";\n\nconst urlEarth = \"https://covid19.mathdro.id/api\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      Covid-19 Stats\n      <div className=\"panel panel-earth\">\n        <h3>Total on Earth: </h3>\n        <StatsDisplay url={urlEarth} />\n        <EarthStats />\n      </div>\n      {/* <LocalStats /> */}\n      <GeoLocationStats />\n      <CountrySelector />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}